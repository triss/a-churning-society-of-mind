#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#hypothesis][Hypothesis]]
 - [[#assumption][Assumption]]
 - [[#how-will-i-test-this][How will I test this]]
   - [[#caveats][Caveats]]
 - [[#re-representation-algorithm][Re-representation Algorithm]]
 - [[#how-are-nodes-ordered-in-scripts][how are nodes ordered in Scripts?]]
 - [[#namespace-a-churning-society-of-mindconverting-workflows-to-bb][Namespace: a-churning-society-of-mind.converting-workflows-to-bb]]
   - [[#the-actual-clojure-namespace][The actual Clojure namespace]]

* Hypothesis

FlowWr workflows can be programmatically converted to blackboard processes and node execution ordering will persist across re-representation.
This is perhaps due to FloWr workflows still contains no loop or control logic facilities and perhaps represent more of a 'pipeline' than a workflow????

The experts on the blackboard will perform tasks in the order specified 
in the original workflow upon launch
after this they will continue to operate,
and the dynamics of a new system with the potential for producing
new artefacts will then emerge.

Therefore a re-repesentation of a FloWr workflow into a blackboard will always have 
/more expressive power/ - /a larger domain of operation/ - /can potentially generate more stuff/ - ????
than the workflow they encode.

* Assumption

The persistence of node ordering will be achieved by ensuring all nodes 
from the workflow are sorted by the number of dependent nodes they have
and assigned decreasing priorities in that order
when re-reprentating.

Predicates of experts will all ask "are all my previously mapped inputs fulfilled?".

* How will I test this

- Re-represent all workflows as blackboards.
- Let the blackboards run.
- Confirm first output of blackboard fulfils same constraints as workflows output.
- Some systems may output more artefacts than the workflow did.
- After we have our *quantitative* results we can analyse process using
  - Extra artefacts may have different qualities and need to be analysed qualitatively using SPECS
  - We should probably also examine remaining contents of blackboard for other artefacts using SPECS
  - FACE but I'm not sure it's actually powerful enough to pick up change in power
  - Creative Tripod might be better guide but still pretty poor of describing power

** Caveats 

The above statements are probably going to be the source of a long list of caveats.

* Re-representation Algorithm

  - Set priority to HIGH
  - Create an empty blackboard
  - Parse script
  - Ensure sorted by number of dependencies
  - For every node in script
    - construct predicate using mapped parameters
    - add new expert with new predicate to blackboard with current priority
    - reduce priority

* TODO how are nodes ordered in Scripts?

We may need to do a sort based on how inputs and outputs are joined. 
this could be done in a way UGen graphs are optimised in SuperCollider
i.e. sort by number of dependants,
but this sort already appears to have happened? 
need to examine source?

* Namespace: a-churning-society-of-mind.converting-workflows-to-bb
** The actual Clojure namespace

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/converting-workflows-to-bb.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.converting-workflows-to-bb
    (:require [clojure.spec :as s]
              [clojure.string :as str]))
#+END_SRC
