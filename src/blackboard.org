#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#the-blackboard-model][The blackboard model]]
   - [[#metaphor][Metaphor]]
     - [[#independence-of-expertise][Independence of expertise]]
   - [[#how-does-it-differ-to-rule-based-systems][How does it differ to rule based systems?]]
   - [[#problems][Problems]]
   - [[#my-adaption][My adaption]]
   - [[#the-data-structure][The data structure]]
     - [[#history][History]]
   - [[#experts][Experts]]
     - [[#pre-conditions][Pre-conditions]]
     - [[#actions][Actions]]
     - [[#priority][Priority]]
     - [[#what-might-experts-do][What might experts do?]]
   - [[#other-stuff][Other stuff]]
   - [[#updating-the-blackboard][Updating the blackboard]]
     - [[#scheduling][Scheduling]]
     - [[#tracking-history-and-performing-actions][Tracking history and performing actions]]
   - [[#whats-next][What's next?]]
     - [[#building-serendipitous-circumstances-and-automatically-leveraging-them][building serendipitous circumstances and automatically leveraging them]]
     - [[#do-some-actual-reading][Do some actual reading]]
     - [[#kicking-the-tyres][Kicking the tyres]]
     - [[#spreading-flowcharts-across-the-board][Spreading flowcharts across the board]]
     - [[#re-rerepesentation][Re-rerepesentation]]
     - [[#creative-scheduling][Creative scheduling]]
     - [[#blackboard-as-a-service][Blackboard as a service]]
     - [[#visualisations][Visualisations]]
     - [[#the-blackboard-model-as-a-style-of-programming][The blackboard model as a style of programming]]
     - [[#what-meta-data-is-it-worth-the-stuff-and-experts-having][What meta data is it worth the stuff and experts having?]]
     - [[#lazybored-computers][Lazy/bored computers]]
 - [[#namespace-a-churning-society-of-mindblackboard][Namespace: a-churning-society-of-mind.blackboard]]
   - [[#the-actual-clojure-namespace][The actual Clojure namespace]]

* The blackboard model

"Unlike most AI problem-solving techniques that implement formal models, 
the blackboard approach was designed as a means for dealing with ill-defined, complex applications."
cite:Craig1988

Misztal stated that the blackboard model "has a potential to be used in simulating cognitive processes such as creativity." 
cite:Misztal2014 

** Metaphor 

"Imagine a group of human specialists seated next to a large blackboard. 
The specialists are working cooperatively to solve a problem, using the blackboard as the workplace for developing the solution.

Problem solving begins when the problem and initial data are written onto the blackboard.
The specialists watch the blackboard, looking for an opportunity to apply their expertise to the developing solution.
When a specialist finds sufficient information to make a contribution, she records the contribution on the blackboard, hopefully enabling other specialists to apply their expertise.
This process of adding contributions to the blackboard continues until the problem has been solved."
cite:Craig1988

*** Independence of expertise

Experts are "not trained to work solely with that specific group of specialists" 
and may have 
"learned their expertise in vastly different situations."
"a specialist is a self-contained expert on some aspects of the problem and can contribute to the solution independently of the particular mix of other specialists in the room."
In blackboard systems "have this functional modularization of expertise".
cite:Craig1988

**** Experts/knowledge sources

Experts were traditionally referred to as knowledge sources or KS.

This seems to have stopped and we now call them experts again (cite:Misztal2014)

each "can solve certain aspects of an overall problem"
"No KS requires other KSs in making its contribution"
"Once it finds the information it needs on the blackboard, it can proceed without any assistance from other KSs."

"without changing any other KSs, 
additional KSs can be added to the blackboard system,
poorer performing KSs can be enhanced, 
and inappropriate KSs can be removed."
cite:Craig1988

** How does it differ to rule based systems?

"Rule-based systems are also modular, but at the level of individual rules.
Unlike the large-grained scope of KSs, 
the small size of each rule prevents full independence.
A pair of rules that implement iteration by using a counter value and a termination rule is an example of two rules that cannot be designed independently or removed individually without affecting the performance of the other rule."
cite:Craig1988

** Problems
"However, the lack of formal specifications has also contributed to confusion about blackboard systems and their proper place in the AI problem-solving toolkit."
cite:Craig1988

** My adaption

We've built intelligence all we need to do is let go of the reigns, 
perhaps we need to grow and behave irresponsibly.

 The blackboard model traditionally solves problems by:
 - placing experts around a black-board
 - letting experts take it turns to add and remove items from the blackboard
   - with a certain priority
 - stopping when a particular problem is solved.

 Here we modify the model slightly by placing experts on the blackboard such that one day they may modify one another.

 We also keep track of the blackboards history such that experts can use that in there analysis if they require it. 

 We probably aren't going to bother stopping either.

** The data structure

We're going to implement the black-board as a map. Each item thus requires an identifier. For now a keyword will do. 

But one wonders about the worlds biggest map... That of URL's -> to resources i.e. the internet. The only difference currently is we keep track of the a history... If I used a fancier data structure - like a block-chain, (or indeed the block-chain?), I wouldn't need to track this myself. 

#+BEGIN_SRC clojure :noweb-ref blackboard
  (s/def ::blackboard                               ;; a blackboard 
    (s/and (s/map-of :blackboard/id                 ;; is a map of identifiers
                     (s/or ::expert ::stuff))       ;; to stuff (including experts)
           (s/keys :req-un [:blackboard/history]))) ;; and it always has a history id

  (s/def :blackboard/id keyword?)
#+END_SRC

*** History

 The blackboards history is just a list of tuples containing the expert that performed an action and the state the blackboard was in at that time.
 We might want to keep track of other information like how long it took to perform an experts action in future for richer analysis.

#+BEGIN_SRC clojure :noweb-ref blackboard-history
  (s/def :blackboard/history
    (s/coll-of (s/tuple ::expert ::blackboard)))
#+END_SRC

**** Histories get long
Since this history could get extremely large (although no where near as big as your thinking because of Clojure's lovely data sharing types) we should perhaps look at writing some of it to tape/disk/cloud/blockchain when performing updates.

** Experts
   
Expert's are simply pairs of functions that operate on the blackboard with a priority.

#+BEGIN_SRC clojure :noweb-ref expert
  (s/def ::expert
    (s/keys :req-un [:expert/pre-condition
                     :expert/action
                     :expert/priority]))
#+END_SRC

Since they're implemented as maps here they might contain other meta-data as well. The richer the better.

*** Pre-conditions

The first function is the pre-condition, it returns true or false dependent on whether or not the blackboard is in a state the expert can operate on.

#+BEGIN_SRC clojure :noweb-ref expert-pre-condition
  (s/def :expert/pre-condition
    (s/fspec :args (s/cat :bb ::blackboard)
             :ret boolean?))
#+END_SRC 

*** Actions

The second is the action. This takes the blackboard and returns a new one having performed some operation on it.

#+BEGIN_SRC clojure :noweb-ref expert-action
  (s/def :expert/action
    (s/fspec :args (s/cat :bb ::blackboard)
             :ret ::blackboard))
#+END_SRC 

*** Priority

The priority an agent has dictates how often it's scheduled.
Other agents could manipulate an agents priority.
They might also change there own priority after performing an action since they are also on the blackboard.

Here the priority is modelled as a positive number.

#+BEGIN_SRC clojure :noweb-ref expert-priority
  (s/def :expert/priority
    (s/and number? pos?))
#+END_SRC

*** What might experts do?

**** TODO Curation

Action functions can optionally trigger a side-effect for the purposes of curation, perhaps tweeting output that meets constraints, adding data to some repository, or emitting the next track to play in a DJ set.

**** TODO Finding experts

  Finding experts on any particular subject is hard.
  FloWr's got loads in the form of ProcessNodes, we can wrap those and specify there pre-conditions.  
  I'm fantasising about finding a big repository of WSDLs and slurping those up but things would be too free to evaluate properly.

Better to stick to modules that are designed for creative activities first.
Obviously these can be hand crafted as well.

**** TODO Higher order experts

  Experts can be easily chained.

- new pre-condition that ensures all other pre-conditions are fullfilled.
- new action that either
  - chains the actions together
  - or creates whole new blackboard and lets things have a party
    - perhaps this would require stop function though
  - schedules/structures them ins some other way
 
Other experts would be responsible for doing this and probably influenced by histories.

**** TODO Garbage collectors

These blackboards will get large.
Garbage collection might be sensible.
Having an agent that just copies the blackboard to a bigger computer would be cooler.

** Other stuff

Expert's operate on items left on the blackboard.
We shall refer to this as stuff.

It has a type description, here implemented using Clojure's SPEC and also a blob of data.

#+BEGIN_SRC clojure :noweb-ref stuff
  (s/def ::stuff
    (s/keys :req-un [:stuff/type :stuff/data]))

  (s/def :stuff/type s/spec?)

  (s/def :stuff/data any?)
#+END_SRC

** Updating the blackboard

The process of updating the blackboard is straigt-forward.
We simply find the next expert to run, use it against the blackboard 

#+BEGIN_SRC clojure :noweb-ref update-blackboard
  (s/fdef update-blackboard
          :args (s/cat :bb ::blackboard)
          :ret ::blackboard)

  (defn update-blackboard
    "Takes a blackboard, finds the next expert to run, applies it's action, and
    updates the history."
    [blackboard]
    (let [{:keys [action] :as expert} (schedule blackboard)]
      (->> (action blackboard)
           (assoc :history [expert blackboard]))))
#+END_SRC

*** Scheduling

Scheduling is handled in a manner similar to Misztal. 
We don't ensure variety of expert however. Priority manipulation could be performed by experts based on evaluative measures.
We just sort by priority.
Here scheduling is handled by a function that takes a blackboard, finds the experts on it whose pre-condition can be filled, sorts them by priority and  

#+BEGIN_SRC clojure :noweb-ref schedule
  (s/fdef schedule
          :args (s/cat :blackboard ::blackboard)
          :ret ::expert)

  (defn schedule
    "Schedules the next expert to run."
    [blackboard]
    (->> (vals blackboard)                          ;; get the values out of the blackboard
         (filter #(s/valid? ::expert %))            ;; collect up the experts,
         (filter #((:pre-condition %) blackboard))  ;; filter off those whose pre-condition is fulfilled,
         (sort-by :priority)                        ;; and sort them by priority
         (first)))
#+END_SRC

There are probably a million and one ways to schedule things.

I think it might make sense to keep things as simple as possible at this level and let experts handle scheduling inside system.

*** Tracking history and performing actions 

** What's next?
*** building serendipitous circumstances and automatically leveraging them
*** Do some actual reading
What's this blackboard model been used for?
I know Misztal's work currently but will chase back from there.

*** Kicking the tyres
**** Simple demos solving Artistic and mathematical goals

**** Misztal poetry generator
I'd like to spend a day or two re-implementing Misztal's poetry generator.
This should port straight across. I reckon 3 days work.
Only interesting bit is moving component of scheduler that ensure variety in the experts that get selected to run will be encoded in expert rather than the scheduler itself.

**** Some sort of picture drawing thingmy

Just for the hell of it.
There should be experts who re-prioritise other experts based on heuristics.

*** Spreading flowcharts across the board

Assuming we can get them then we'll look at dumping in a lot of FlowWr's flow charts and see what the impact of that is.
- All that's required is removing pointers from input to output
- Prioritising the agents in some way (probably by hand)

I have a feeling at least some of these will have been evaluated.
I could perform comparative evaluations between flowcharts and converted blackboard equivalents.

*** Re-rerepesentation

I can make agents that can rerepresent.

I need somewhere for re-reprentation to take place.

FlowWr workflows will be re-represented as Blackboard/Experts and possibly back again.
We can do any evaluative comparison here.

Whilst it could happen anywhere my re-representation will occur in side the blackboard model. 

Whilst standalone fiddling will be interesting it’s the constant re-representation that’s likely to be most exciting.

Stuff will be re-represeted by experts.

Experts will look to re-represent one another.

**** coercion between types will be neccesary
**** Re-representation agents
***** markov as NN
***** function as NN, markov
***** picture
****** gp
****** neural network
***** between one another

*** Creative scheduling

The scheduling reminds me of the way an operating system schedules processes and I might poke about in the literature there re: inspiration for creative scheduling methodologies.
Maybe operating systems should be modelled around experts and a blackboard instead of processes and resources?

**** Erlang style parrallelisation

Well CSP to be specific. 
Experts might take a long time to do there job.
Lets spawn them as processes/actors and handle merging in of there output as and when it's ready.
It's an afternoons work and opens up interesting options.

*** Blackboard as a service

We can make this a web service thingmy.
Remote experts should be able to request state of blackboard and that items are added to it.
This would be easier to build on top of parrallelised model described above.

*** Visualisations
A simple visualisation of blackboard processes unfolding would be nice resource for thesis?
Maybe a nice web based UI/REPL?

*** The blackboard model as a style of programming

Colin stated that this is how he expected object orientated programming to work when he got the wrong end of a stick.

As a mimimum I'll look to write a DSL for writing experts.

This probably won't take more than a macro/function or three.

I think the blackboard model could be a wonderful means for doing semi-automatic programming with dynamic algorithms.

Isn't dynamic algorithms considered genetic programming's down fall?

Can we automate the construction of blackboards for solving particular problems?

*** What meta data is it worth the stuff and experts having?
- Who made things.
- How successful they are.

It's perhaps not worth worrying about. Each expert or set of experts will likely worry about different things.

*** Lazy/bored computers

Blackboard model if well architectured - I think it is would be a good area for lazy computing.    

Recording how long different tasks took to run could lead to interesting developments.

Shortest route for different types of solutions/re-representations.

Scheduling agents could get bored.



* Namespace: a-churning-society-of-mind.blackboard
** The actual Clojure namespace

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/blackboard.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.blackboard
    (:require [clojure.spec :as s]))

  <<blackboard>>
  <<blackboard-history>>
  <<expert>>
  <<expert-pre-condition>>
  <<expert-pre-action>>
  <<expert-priority>>
  <<stuff>>
  <<schedule>>
  <<update-blackboard>>
#+END_SRC
