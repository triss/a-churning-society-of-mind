#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#236---guardian-illustrated][236 - Guardian Illustrated]]
   - [[#porting-guardian-illustrated-to-clojure][Porting Guardian Illustrated to Clojure]]
   - [[#representations][Representations]]
   - [[#modules][Modules]]
     - [[#guardian][Guardian]]
     - [[#sentimentsorter][SentimentSorter]]
     - [[#textrankkeyphraseextractor][TextRankKeyPhraseExtractor]]
     - [[#flickr][Flickr]]

* 236 - Guardian Illustrated
   

** Porting Guardian Illustrated to Clojure



#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/guardian_illustrated.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.guardian-illustrated
    (:require [a-churning-society-of-mind.guardian :as guardian]
              [a-churning-society-of-mind.html :as html]
              [a-churning-society-of-mind.flickr :as flickr]
              [a-churning-society-of-mind.core-nlp-sentiment :as sentiment]
              [a-churning-society-of-mind.text-rank :as text-rank]
              [clojure.string :as str]
              [clojure.java.io :as io]
              [clojure.spec :as s]))

  (defn pp
    [x] (clojure.pprint/pprint x) x)

  (defn choose
    [coll] (when (seq coll) (rand-nth coll)))

  (defn guardian-illustrated
    [text]
    {:text  text
     :photo (some-> text flickr/search pp choose flickr/get-photo)})

  (defn save
    [{:keys [text photo]}]
    (with-open [out (-> (str/replace text "/" " ")
                        (str ".jpg")
                        (io/file)
                        (io/output-stream))]
      (when (:body photo)
        (.write out ^bytes (:body photo)))))

  (->> (guardian/search "Tristan")
       (map #(-> % guardian/result->body-html html/strip-tags))
       (sentiment/most-miserable-text)
       (text-rank/key-phrases)
                                          ;(sentiment/most-miserable-text)
       (mapv #(-> % guardian-illustrated save))
       ;(save)
       )
#+END_SRC

** Representations
   
#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/specs.cljc :noweb yes :mkdirp yes :padline no

#+END_SRC

** Modules
*** Guardian

Returns 100 articles from a Guardian corpus.
At time of development I was unable to source the corpus used within FloWr.
For this reason the Guardian's web service API is wrapped.

**** Web service 

Consuming the Guardian web services content is straightforward. 
The API is restful, does not require complex authentication for much of its functionality and is well documented.
The API described here: http://open-platform.theguardian.com/documentation/search
Simply retrieving articles is simple, you set the following query parameters:
- q :: the search being performed
- fields :: set to 'body' such that article is retrieved.

The rest of the API's functionality is accessed by setting further parameters.

Is there an automated means of constructing query? No WSDL for Guardian service appears to be available online.

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/guardian.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.guardian
    (:require [clj-http.client :as http]
              [clojure.spec :as s]))

  (s/def :string/id string?)
  (s/def :string/status string?)
  (s/def :string/url string?)
  (s/def :string/html string?)
  (s/def :string/text string?)
  (s/def :string/sentence string?)
  (s/def :string/token string?)
  (s/def :string/boolean #{"true" "false"})
  (s/def :string/date string?)
  (s/def :string/number string?)

  (s/def :guardian/order #{"newest" "oldest" "relevance"})

  (s/def :guardian-responce/status string?) ; ok etc.
  (s/def :guardian-responce/total int?)
  (s/def :guardian-responce/orderBy :guardian/order)
  (s/def :guardian-responce/results (s/coll-of :guardian/result))

  (s/def :guardian/response
    (s/keys :opt-un [:guardian-responce/status
                     :guardian-responce/total
                     :guardian-responce/orderBy
                     :guardian-responce/results]))

  (s/def :guardian-result/id :string/id)
  (s/def :guardian-result/sectionId :string/id)
  (s/def :guardian-result/sectionName :string/text)
  (s/def :guardian-result/webPublicationDate :string/date)
  (s/def :guardian-result/webUrl :string/url)
  (s/def :guardian-result/apiUrl :string/url)

  (s/def :guardian-result-field/trailTrext :string/html)
  (s/def :guardian-result-field/headline :string/html)
  (s/def :guardian-result-field/showInRelatedContent :string/boolean)
  (s/def :guardian-result-field/body :string/html)
  (s/def :guardian-result-field/lastModified :string/date)
  (s/def :guardian-result-field/hadStoryPackage :string/boolean)
  (s/def :guardian-result-field/score :string/number)
  (s/def :guardian-result-field/standfirst :string/html)
  (s/def :guardian-result-field/shortUrl :string/url)
  (s/def :guardian-result-field/thumbnail :string/url)
  (s/def :guardian-result-field/wordcount :string/number)
  (s/def :guardian-result-field/commentable :string/boolean)
  (s/def :guardian-result-field/isPremoderated :string/boolean)
  (s/def :guardian-result-field/allowUgc :string/boolean)
  (s/def :guardian-result-field/byline :string/html)
  (s/def :guardian-result-field/publication :string/text)
  (s/def :guardian-result-field/commentCloseDate :string/date)
  (s/def :guardian-result-field/starRating :string/number)

  (s/def :guadian-result/fields
    (s/keys :opt-un [:guardian-result-field/trailTrext
                     :guardian-result-field/headline
                     :guardian-result-field/showInRelatedContent
                     :guardian-result-field/body
                     :guardian-result-field/lastModified
                     :guardian-result-field/hadStoryPackage
                     :guardian-result-field/score
                     :guardian-result-field/standfirst
                     :guardian-result-field/shortUrl
                     :guardian-result-field/thumbnail
                     :guardian-result-field/wordcount
                     :guardian-result-field/commentable
                     :guardian-result-field/isPremoderated
                     :guardian-result-field/allowUgc
                     :guardian-result-field/byline
                     :guardian-result-field/commentCloseDate
                     :guardian-result-field/starRating]))

  (s/def :guardian/result
    (s/keys :opt-un [:guardian/id
                     :guardian/sectionId
                     :guardian/sectionName
                     :guardian/webPublicationDate
                     :guardian/webUrl
                     :guardian/apiUrl
                     :guardian/fields]))

  (s/fdef search
          :args (s/cat :query string?)
          :ret :guardian/response)

  (defn search
    "Perform search using Guardian API. Returns articles that match query."
    [query]
    (-> (http/get "http://content.guardianapis.com/search"
                  {:as           :json
                   :query-params {"q"           query
                                  "api-key"     "6b8ba3a3-2cc9-464f-988f-734c780d69ed"
                                  "show-fields" "all"}})
        (get-in [:body :response :results])))

  (s/fdef result->body-html
          :args (s/cat :result :guardian/result)
          :ret string?)

  (defn result->body-html
    "Extract body HTML from result."
    [result] (get-in result [:fields :body]))
#+END_SRC

***** HTML clean up

We'll use Jsoup for that.
When does it make sense to dump HTML representation of body?

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/html.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.html
    (:require [clojure.spec :as s])
    (:import (org.jsoup Jsoup)))

  (s/def :html/document string?)
  (s/def :text/document string?)

  (s/fdef strip-tags
          :args (s/cat :s :html/document)
          :ret :text/document)

  (defn strip-tags
    "Removes HTML tags from string."
    [s] (.text (Jsoup/parse s)))
#+END_SRC

*** SentimentSorter

Sorts incoming documents by valency.
ArrayList<String>

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/core_nlp_sentiment.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.core-nlp-sentiment
    (:require [damionjunk.nlp.stanford :as nlp]
              [incanter.stats :as stats]
              [clojure.spec :as s])
    (:import (org.jsoup Jsoup)))

  (s/def ::sentiment (s/and int? #(> 0 % 5)))
  (s/def ::text string?)

  (s/fdef analyze-sentences
          :args (s/cat :s string?)
          :ret (s/coll-of (s/keys :req-un [::sentiment ::text])))

  (defn analyze-sentences
    [s] (nlp/sentiment-maps s))

  (defn text-stats
    [text]
    (let [sentiments (analyze-sentences text)
          ss         (map :sentiment sentiments)]
      {:text      text
       :sentiment {:sd        (stats/sd ss)
                   :mean      (stats/mean ss)
                   :variance  (stats/variance ss)
                   :sentences sentiments}}))

  <<most-miserable-text>>
#+END_SRC

**** Most miserable text

Although not visible on the Guardian Illustrated workflow visualisation the workflow uses the same piece of logic twice to select the most miserable text.

#+BEGIN_SRC clojure :noweb-ref most-miserable-text
  (s/fdef most-miserable-text
          :args (s/cat :texts (s/coll-of (s/keys [::sentiment ::text])))
          :ret ::text)

  (defn most-miserable-text
    [texts]
    (->> (map text-stats texts)
         (sort-by #(get-in % [:sentiment :mean]))
         (first)
         (:text)))
#+END_SRC

*** TextRankKeyPhraseExtractor 

#+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/text-rank.cljc :noweb yes :mkdirp yes :padline no
  (ns a-churning-society-of-mind.text-rank
    (:require [clojure.java.shell :as sh]
              [clojure.string :as str]
              [clojure.spec :as s])
    (:import (java.io File)))

  (defn key-phrases
    [s]
    (let [tmp-file (File/createTempFile "text-for-key-phrases" "txt")]
      (spit tmp-file s :encoding "ISO-8859-1")
      (->> (.getAbsolutePath tmp-file)
           (sh/sh "textrank" "extract_phrases")
           (:out)
           (re-seq #"'(.+?)'")
           (map second))))
#+END_SRC

*** Flickr

Use Flickr's search API https://www.flickr.com/services/api/flickr.photos.search.html

  #+BEGIN_SRC clojure :tangle ../babel/src/a_churning_society_of_mind/flickr.cljc :noweb yes :mkdirp yes :padline no
    (ns a-churning-society-of-mind.flickr
      (:require [clojure.spec :as s]
                [clj-http.client :as client]))

    (s/def :flickr/photo-def
      (s/keys :req-un [:flickr/id :flickr/farm :flickr/server :flickr/secret]))

    (s/def ::image any?)

    (s/fdef search
            :args (s/cat :s string?)
            :ret (s/coll-of :flickr/photo-def))

    (defn search
      [query]
      (-> (client/get "https://api.flickr.com/services/rest/"
                      {:as           :json
                       :query-params {"api_key"        "dd70dc76f6998112861f8fdfabf92fd9"
                                      "method"         "flickr.photos.search"
                                      "text"           query
                                      "format"         "json"
                                      "nojsoncallback" 1}})
          (get-in [:body :photos :photo])))

    <<flickr-get-photo>>
  #+END_SRC

**** Get photo

Images are fetched using Photo Source URL constructed as described here:
https://www.flickr.com/services/api/misc.urls.html


#+BEGIN_SRC clojure :noweb-ref flickr-get-photo
  (s/fdef get-photo
          :args (s/cat :photo-def :flickr/photo-def)
          :ret ::image)

  (defn get-photo
    [{:keys [id farm server secret]}]
    (client/get (str "https://farm" farm ".staticflickr.com/"
                     server "/" id "_" secret ".jpg")
                {:as :byte-array}))
#+END_SRC
